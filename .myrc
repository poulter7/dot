#!/bin/bash
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  SESSION_TYPE=remote/ssh
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) SESSION_TYPE=remote/ssh;;
  esac
  alias vim=nvim
fi

alias resource="source ~/.zshrc && tmux source-file ~/.tmux.conf"
alias notes="v ~/notepad"
alias n="notes"
alias v="vim"

myrconetime(){
  echo "[direnv]"
  if ! [ -x "$(command -v direnv)" ]; then
    curl -sfL https://direnv.net/install.sh | bash
  else
    echo "already installed"
  fi

	echo "[tmux]"
	if ! [ -x  "$(command -v tmux)" ]; then
		echo "installing"
		brew install tmux
	else
		echo "already installed"
	fi

	echo "[tmuxp]"
	if [[ ! -d "~/.tmux/plugins/tpm" ]]; then
		git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
	else
		echo "already installed"
	fi

  if [ -d ~/.oh-my-zsh ]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
   else
    echo "oh-my-zsh is not installed"
  fi

  echo "[powerlevel10k]"
	if ! [ -x  "$(command -v p10k)" ]; then
    echo "installing"
    brew install romkatv/powerlevel10k/powerlevel10k
	else
		echo "already installed"
	fi


	# echo "[lvim]"
	# if ! [ -x  "$(command -v lvim)" ]; then
	# 	  LV_BRANCH='release-1.2/neovim-0.8' bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)
	# else
	# 	echo "already installed"
	# fi



	echo "[ripgrep]"
	if ! [ -x  "$(command -v rg)" ]; then
		echo "installing"
		brew install ripgrep
	else
		echo "already installed"
	fi

  echo "[setting up configs]"
  curl -s https://raw.githubusercontent.com/gpakosz/.tmux/master/.tmux.conf > ~/.tmux.conf
  ln -sF ~/workspaces/dot/tmux/.tmux.conf ~/.tmux.conf.local 
  ln -sF ~/workspaces/dot/idea/.ideavimrc ~/.ideavimrc
  # ln -sF ~/workspaces/dot/lvim/config.lua ~/.config/lvim/config.lua 
  ln -sF ~/workspaces/dot/astrovim ~/.config/nvim
  sudo ln -sF ~/workspaces/dot/spotifyd/spotifyd /etc/spotifyd.conf
}

myrcstartup(){
	# Load tmux
	if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ] && [[ ! "$TERM_PROGRAM" =~ "vscode" ]] && [[ ! "$TERMINAL_EMULATOR" =~ "JetBrains-JediTerm" ]]; then
	  setopt inc_append_history
	  exec tmux
	else
    #alias cd=z
    #eval "$(zoxide init zsh)"
    eval "$(direnv hook zsh)"
    source /usr/local/opt/powerlevel10k/powerlevel10k.zsh-theme
    set -o vi
    export GIT_EDITOR=lvim
  	hidutil property --set '{"UserKeyMapping":[
{"HIDKeyboardModifierMappingSrc":0x7000000E7,"HIDKeyboardModifierMappingDst":0x700000044},
{"HIDKeyboardModifierMappingSrc":0x7000000E6,"HIDKeyboardModifierMappingDst":0x700000045},
]}' > /dev/null
    export HISTFILE=~/.zsh_history
    export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
    export HISTSIZE=100000                   # big big history
    export SAVEHIST=100000                   # big big history
    export HISTFILESIZE=100000               # big big history
    setopt inc_append_history

    # Save and reload the history after each command finishes
    #export PROMPT_COMMAND="history -n;history -w;history -c;history -r;$PROMPT_COMMAND"
	fi
}
# myrconetime
myrcstartup
